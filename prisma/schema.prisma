// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  phone      String?     @unique
  email      String?     @unique
  avatar     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tokens     Token[]
  products   Product[]
  favs       Fav[]
  posts      Post[]
  answers    Answer[]
  wonderList Wondering[]

}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  description String   @db.LongText
  image       String
  lat         Float?
  lng         Float?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  favs        Fav[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         Int         @id @default(autoincrement())
  question   String      @db.MediumText
  lat        Float?
  lng        Float?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  answers    Answer[]
  wonderList Wondering[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Answer {
  id        Int      @id @default(autoincrement())
  answer    String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
